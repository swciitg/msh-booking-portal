# Generated by Django 3.2.5 on 2022-02-02 12:05

import datetime
from django.db import migrations, models
import django.db.models.deletion
import hab_portal.models
import hab_portal.storage


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0004_alter_siteuser_data'),
        ('hab_portal', '0019_auto_20211002_1730'),
    ]

    operations = [
        migrations.AlterField(
            model_name='habmodel',
            name='date_of_payment',
            field=models.DateField(blank=True, default=datetime.datetime.now, null=True, verbose_name='Date of Payment'),
        ),
        migrations.AlterField(
            model_name='habmodel',
            name='date_of_testing',
            field=models.DateField(blank=True, default=datetime.datetime.now, null=True, verbose_name='Date of Test'),
        ),
        migrations.AlterField(
            model_name='habmodel',
            name='fee_receipt',
            field=models.FileField(blank=True, help_text='Upload a .PDF file not greater than 10 MB in size.', null=True, storage=hab_portal.storage.OverwriteStorage(), upload_to=hab_portal.models.fee_upload_file_name, validators=[hab_portal.models.validate_file_size, hab_portal.models.validate_file_extension], verbose_name='Fee Receipt'),
        ),
        migrations.AlterField(
            model_name='habmodel',
            name='mess_fee_paid',
            field=models.IntegerField(blank=True, null=True, verbose_name='Fee Paid'),
        ),
        migrations.AlterField(
            model_name='habmodel',
            name='nature_of_test',
            field=models.CharField(blank=True, choices=[('RT-PCR', 'RT-PCR'), ('TrueNat', 'TrueNat')], default='RT-PCR', max_length=256, null=True, verbose_name='Nature of Test'),
        ),
        migrations.AlterField(
            model_name='habmodel',
            name='programme',
            field=models.CharField(choices=[('M.Tech', 'M.Tech'), ('M.Des', 'M.Des'), ('M.A.', 'M.A.'), ('M.Sc.', 'M.Sc.'), ('MSR', 'MSR'), ('B.Tech. 4th Year', 'B.Tech. 4th Year'), ('PhD', 'PhD'), ('IPDF', 'IPDF'), ('Project Staff', 'Project Staff')], max_length=256, verbose_name='Programme'),
        ),
        migrations.AlterField(
            model_name='habmodel',
            name='roll_number',
            field=models.CharField(help_text='Enter a valid Roll Number.', max_length=100, verbose_name='Roll No.'),
        ),
        migrations.AlterField(
            model_name='habmodel',
            name='rtpcr_report',
            field=models.FileField(blank=True, help_text='Upload a .PDF file not greater than 10 MB in size.', null=True, storage=hab_portal.storage.OverwriteStorage(), upload_to=hab_portal.models.rtpcr_upload_file_name, validators=[hab_portal.models.validate_file_size, hab_portal.models.validate_file_extension], verbose_name='RTPCR Report'),
        ),
        migrations.CreateModel(
            name='NewHABModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_of_submission', models.DateTimeField(auto_now_add=True, null=True)),
                ('invite_sent', models.CharField(choices=[('Invited', 'Invited'), ('Not Invited', 'Not Invited')], default='Not Invited', max_length=256, null=True)),
                ('status', models.CharField(choices=[('Verified', 'Verified'), ('Not Verified', 'Not Verified')], default='Not Verified', max_length=256, null=True)),
                ('locked', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=256, verbose_name='Name')),
                ('roll_number', models.CharField(help_text='Enter a valid Roll Number.', max_length=100, verbose_name='Roll No.')),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female')], default='Male', max_length=256, null=True, verbose_name='Gender')),
                ('email', models.CharField(max_length=256, verbose_name='Email')),
                ('mobile', models.IntegerField(verbose_name='Mobile')),
                ('vaccination_status', models.CharField(choices=[('Single Dose', 'Single Dose'), ('Double Dose', 'Double Dose')], default='Single Dose', max_length=256, null=True, verbose_name='Vaccination Status')),
                ('programme', models.CharField(choices=[('M.Tech', 'M.Tech'), ('M.Des', 'M.Des'), ('M.A.', 'M.A.'), ('M.Sc.', 'M.Sc.'), ('MSR', 'MSR'), ('B.Tech. 4th Year', 'B.Tech. 4th Year'), ('PhD', 'PhD'), ('IPDF', 'IPDF'), ('Project Staff', 'Project Staff')], max_length=256, verbose_name='Programme')),
                ('department', models.CharField(max_length=256, verbose_name='Department')),
                ('supervisor', models.CharField(blank=True, max_length=256, verbose_name='Supervisor (if any)')),
                ('email_of_supervisor', models.CharField(blank=True, max_length=256, verbose_name='Supervisor Email')),
                ('returning_from_state', models.CharField(choices=[('Other (Foreign Country)', 'Other (Foreign Country)'), ('Andhra Pradesh', 'Andhra Pradesh'), ('Arunachal Pradesh ', 'Arunachal Pradesh '), ('Assam', 'Assam'), ('Bihar', 'Bihar'), ('Chhattisgarh', 'Chhattisgarh'), ('Goa', 'Goa'), ('Gujarat', 'Gujarat'), ('Haryana', 'Haryana'), ('Himachal Pradesh', 'Himachal Pradesh'), ('Jammu and Kashmir ', 'Jammu and Kashmir '), ('Jharkhand', 'Jharkhand'), ('Karnataka', 'Karnataka'), ('Kerala', 'Kerala'), ('Madhya Pradesh', 'Madhya Pradesh'), ('Maharashtra', 'Maharashtra'), ('Manipur', 'Manipur'), ('Meghalaya', 'Meghalaya'), ('Mizoram', 'Mizoram'), ('Nagaland', 'Nagaland'), ('Odisha', 'Odisha'), ('Punjab', 'Punjab'), ('Rajasthan', 'Rajasthan'), ('Sikkim', 'Sikkim'), ('Tamil Nadu', 'Tamil Nadu'), ('Telangana', 'Telangana'), ('Tripura', 'Tripura'), ('Uttar Pradesh', 'Uttar Pradesh'), ('Uttarakhand', 'Uttarakhand'), ('West Bengal', 'West Bengal'), ('Andaman and Nicobar Islands', 'Andaman and Nicobar Islands'), ('Chandigarh', 'Chandigarh'), ('Dadra and Nagar Haveli', 'Dadra and Nagar Haveli'), ('Daman and Diu', 'Daman and Diu'), ('Lakshadweep', 'Lakshadweep'), ('Delhi', 'Delhi'), ('Puducherry', 'Puducherry')], max_length=256, null=True, verbose_name='Returning from (state)')),
                ('recieved_an_invite', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=256, null=True, verbose_name='Have you Recieved an Invite')),
                ('proof_of_invitation', models.FileField(blank=True, help_text='Upload screenshot of mail received from student affairs. Upload an image file of .jpg, .jpeg or .png extension.', null=True, storage=hab_portal.storage.OverwriteStorage(), upload_to=hab_portal.models.proof_of_invitation_file_name, validators=[hab_portal.models.validate_file_size, hab_portal.models.validate_file_extension_image], verbose_name='Proof of Invitation')),
                ('date_of_arrival', models.DateTimeField(default=datetime.datetime.now, null=True, verbose_name='Date of Arrival')),
                ('mode_of_travel', models.CharField(blank=True, max_length=256, null=True, verbose_name='Mode of Travel')),
                ('flight_train_number', models.CharField(blank=True, max_length=256, null=True, verbose_name='Flight / Train No.')),
                ('nature_of_test', models.CharField(blank=True, choices=[('RT-PCR', 'RT-PCR'), ('TrueNat', 'TrueNat')], default='RT-PCR', max_length=256, null=True, verbose_name='Nature of Test')),
                ('date_of_testing', models.DateField(blank=True, default=datetime.datetime.now, null=True, verbose_name='Date of Test')),
                ('hostel', models.CharField(choices=[('lohit', 'Lohit'), ('brahmaputra', 'Brahmaputra'), ('siang', 'Siang'), ('manas', 'Manas'), ('dibang', 'Dibang'), ('disang', '*Disang'), ('kameng', 'Kameng'), ('umiam', 'Umiam'), ('barak', 'Barak'), ('kapili', 'Kapili'), ('dihing', 'Dihing'), ('subansiri', 'Subansiri'), ('dhansiri', 'Dhansiri'), ('dibang', 'Dibang'), ('msh', 'Married Scholar Hostel'), ('not-alloted', 'Not Alloted')], max_length=256, null=True, verbose_name='Hostel')),
                ('room_no', models.CharField(blank=True, max_length=256, null=True, verbose_name='Room Number')),
                ('check_in_date', models.DateTimeField(default=datetime.datetime.now, null=True, verbose_name='Check-in Date')),
                ('mess_fee_paid', models.IntegerField(blank=True, null=True, verbose_name='Fee Paid')),
                ('date_of_payment', models.DateField(blank=True, default=datetime.datetime.now, null=True, verbose_name='Date of Payment')),
                ('fee_receipt', models.FileField(blank=True, help_text='Upload a .PDF file not greater than 10 MB in size.', null=True, storage=hab_portal.storage.OverwriteStorage(), upload_to=hab_portal.models.fee_upload_file_name, validators=[hab_portal.models.validate_file_size, hab_portal.models.validate_file_extension], verbose_name='Fee Receipt')),
                ('vaccination_cert', models.FileField(help_text='Upload a .PDF file not greater than 10 MB in size.', null=True, storage=hab_portal.storage.OverwriteStorage(), upload_to=hab_portal.models.vacc_upload_file_name, validators=[hab_portal.models.validate_file_size, hab_portal.models.validate_file_extension], verbose_name='Vaccination Certificate')),
                ('travel_ticket', models.FileField(help_text='Upload a .PDF file not greater than 10 MB in size.', null=True, storage=hab_portal.storage.OverwriteStorage(), upload_to=hab_portal.models.travel_upload_file_name, validators=[hab_portal.models.validate_file_size, hab_portal.models.validate_file_extension], verbose_name='Travel Ticket')),
                ('rtpcr_report', models.FileField(blank=True, help_text='Upload a .PDF file not greater than 10 MB in size.', null=True, storage=hab_portal.storage.OverwriteStorage(), upload_to=hab_portal.models.rtpcr_upload_file_name, validators=[hab_portal.models.validate_file_size, hab_portal.models.validate_file_extension], verbose_name='RTPCR Report')),
                ('final_pdf', models.FileField(null=True, storage=hab_portal.storage.OverwriteStorage(), upload_to=hab_portal.models.final_pdf_file_name, verbose_name='final pdf')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='users.siteuser')),
            ],
            options={
                'ordering': ['hostel', '-status', 'date_of_arrival'],
                'permissions': (('can_view_lohit_hostel_data', 'can view lohit hostel data'), ('can_view_brahma_hostel_data', 'can view brahma hostel data'), ('can_view_siang_hostel_data', 'can view siang hostel data'), ('can_view_manas_hostel_data', 'can view manas hostel data'), ('can_view_disang_hostel_data', 'can view disang hostel data'), ('can_view_kameng_hostel_data', 'can view kameng hostel data'), ('can_view_umiam_hostel_data', 'can view umiam hostel data'), ('can_view_barak_hostel_data', 'can view barak hostel data'), ('can_view_kapili_hostel_data', 'can view kapili hostel data'), ('can_view_dihing_hostel_data', 'can view dihing hostel data'), ('can_view_dibang_hostel_data', 'can view dibang hostel data'), ('can_view_suban_hostel_data', 'can view subansiri hostel data'), ('can_view_dhan_hostel_data', 'can view dhansiri hostel data'), ('can_view_msh_hostel_data', 'can view msh hostel data'), ('can_view_not_alloted_data', 'can view not alloted data')),
            },
        ),
    ]
