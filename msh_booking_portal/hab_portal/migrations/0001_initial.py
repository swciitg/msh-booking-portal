# Generated by Django 3.2.5 on 2021-09-07 09:11

import datetime
from django.db import migrations, models
import django.db.models.deletion
import hab_portal.models
import hab_portal.storage


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('users', '0004_alter_siteuser_data'),
    ]

    operations = [
        migrations.CreateModel(
            name='HABModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_of_submission', models.DateTimeField(auto_now_add=True, null=True)),
                ('status', models.CharField(choices=[('Accepted', 'Accepted'), ('Pending', 'Pending'), ('Declined', 'Declined')], default='Pending', max_length=256, null=True)),
                ('locked', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=256, verbose_name='Name')),
                ('roll_number', models.CharField(max_length=256, verbose_name='Roll No.')),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female')], max_length=256, verbose_name='Gender')),
                ('email', models.EmailField(max_length=256, verbose_name='Email')),
                ('mobile', models.CharField(max_length=256, verbose_name='Mobile')),
                ('department', models.CharField(max_length=256, verbose_name='Department')),
                ('programme', models.CharField(max_length=256, verbose_name='Programme')),
                ('supervisor', models.CharField(blank=True, max_length=256, verbose_name='Supervisor (if any)')),
                ('email_of_supervisor', models.EmailField(blank=True, max_length=256, verbose_name='Supervisor Email')),
                ('registered_for_academic_semester', models.BooleanField(default=True, verbose_name='Registered for Academic Semester')),
                ('returning_from_state', models.CharField(max_length=256, verbose_name='Returning from (state)')),
                ('date_of_arrival', models.DateTimeField(default=datetime.datetime.now, verbose_name='Date of Arrival')),
                ('mode_of_travel', models.CharField(blank=True, max_length=256, verbose_name='Mode of Travel')),
                ('flight_train_number', models.CharField(blank=True, max_length=256, verbose_name='Flight / Train No.')),
                ('nature_of_test', models.CharField(choices=[('RT-PCR', 'RT-PCR'), ('TrueNat', 'TrueNat')], max_length=256, verbose_name='Nature of Test')),
                ('date_of_testing', models.DateField(default=datetime.datetime.now, verbose_name='Date of Test')),
                ('hostel', models.CharField(choices=[('lohit', 'Lohit'), ('brahmaputra', 'Brahmaputra'), ('siang', 'Siang'), ('manas', 'Manas'), ('disang', 'Disang'), ('kameng', 'Kameng'), ('umiam', 'Umiam'), ('barak', 'Barak'), ('kapili', 'Kapili'), ('dihing', 'Dihing'), ('subansiri', 'Subansiri'), ('dhansiri', 'Dhansiri'), ('msh', 'Married Scholar Hostel')], max_length=256, verbose_name='Hostel')),
                ('room_no', models.CharField(blank=True, max_length=256, verbose_name='Room Number')),
                ('check_in_date', models.DateTimeField(default=datetime.datetime.now, verbose_name='Check-in Date')),
                ('mess_fee_paid', models.IntegerField(null=True, verbose_name='Fee Paid')),
                ('date_of_payment', models.DateField(verbose_name='Date of Payment')),
                ('fee_receipt', models.FileField(help_text='Upload a .PDF file not greater than 10 MB in size.', storage=hab_portal.storage.OverwriteStorage(), upload_to=hab_portal.models.fee_upload_file_name, validators=[hab_portal.models.validate_file_size, hab_portal.models.validate_file_extension], verbose_name='Fee Receipt')),
                ('vaccination_cert', models.FileField(help_text='Upload a .PDF file not greater than 10 MB in size.', storage=hab_portal.storage.OverwriteStorage(), upload_to=hab_portal.models.vacc_upload_file_name, validators=[hab_portal.models.validate_file_size, hab_portal.models.validate_file_extension], verbose_name='Vaccination Certificate')),
                ('travel_ticket', models.FileField(help_text='Upload a .PDF file not greater than 10 MB in size.', storage=hab_portal.storage.OverwriteStorage(), upload_to=hab_portal.models.travel_upload_file_name, validators=[hab_portal.models.validate_file_size, hab_portal.models.validate_file_extension], verbose_name='Travel Ticket')),
                ('rtpcr_report', models.FileField(help_text='Upload a .PDF file not greater than 10 MB in size.', storage=hab_portal.storage.OverwriteStorage(), upload_to=hab_portal.models.rtpcr_upload_file_name, validators=[hab_portal.models.validate_file_size, hab_portal.models.validate_file_extension], verbose_name='RTPCR Report')),
                ('vaccination_status', models.CharField(choices=[('Double Dose', 'Double Dose')], max_length=256, verbose_name='Vaccination Status')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='users.siteuser')),
            ],
            options={
                'ordering': ['hostel', '-status', 'date_of_arrival'],
                'permissions': (('can_view_lohit_hostel_data', 'can view lohit hostel data'), ('can_view_brahma_hostel_data', 'can view brahma hostel data'), ('can_view_siang_hostel_data', 'can view siang hostel data'), ('can_view_manas_hostel_data', 'can view manas hostel data'), ('can_view_disang_hostel_data', 'can view disang hostel data'), ('can_view_kameng_hostel_data', 'can view kameng hostel data'), ('can_view_umiam_hostel_data', 'can view umiam hostel data'), ('can_view_barak_hostel_data', 'can view barak hostel data'), ('can_view_kapili_hostel_data', 'can view kapili hostel data'), ('can_view_dihing_hostel_data', 'can view dihing hostel data'), ('can_view_suban_hostel_data', 'can view subansiri hostel data'), ('can_view_dhan_hostel_data', 'can view dhansiri hostel data'), ('can_view_msh_hostel_data', 'can view msh hostel data')),
            },
        ),
    ]
